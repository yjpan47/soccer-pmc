//@@Soccer@@

# import "PAT.Lib.SoccerManager";

var <GameManager> gameManager = new GameManager();
var<ManagerA> managerA = new ManagerA();
var<ManagerB> managerB = new ManagerB();

var teamA = managerA.getPlayerStartingLocations();
var teamB = managerB.getPlayerStartingLocations();

var ball = gameManager.getStartingBallLocation();
var possession = gameManager.getStartingPossession();

hvar time = 20;
hvar Ascore = 0;
hvar Bscore = 0;

Game() = [time > 0] A_TeamAction() 
     [] [time > 0] B_TeamAction()
     [] [time <= 0] end -> Game();

A_TeamAction() = [] i:{0..10} @ A_Action(i); 
B_TeamAction() = [] i:{0..10} @ B_Action(i);


A_Action(i) = [managerA.isBallInPlayerBoundary(i, ball) && managerA.isBallWithPlayer(i, possession)] A_ActionWithPlayerPossession(i)
           [] [managerA.isBallInPlayerBoundary(i, ball) && managerA.isBallWithTeammate(i, possession)] A_ActionWithTeammatePossession(i)
           [] [managerA.isBallInPlayerBoundary(i, ball)] A_ActionWithoutPossession(i)
           [] [!managerA.isBallInPlayerBoundary(i, ball)] skip -> Game();

hvar prob_A_ActionWithPlayerPossession[3];
A_ActionWithPlayerPossession(i) = {
	prob_A_ActionWithPlayerPossession = managerA.probActionWithPlayerPossession(i, teamA);
} -> pcase {
	prob_A_ActionWithPlayerPossession[0]: A_Dribble(i)
	prob_A_ActionWithPlayerPossession[1]: A_Pass(i)
	prob_A_ActionWithPlayerPossession[2]: A_Shoot(i)
};

A_ActionWithTeammatePossession(i) = A_Advance(i);

A_ActionWithoutPossession(i) = A_Move(i);

hvar prob_A_Dribble[5];
A_Dribble(i) = {
	prob_A_Dribble = managerA.probDribble(i, teamA);
} -> pcase {
	prob_A_Dribble[0]: dribbleUp{
		teamA = managerA.playerMoveUp(i, teamA);
		ball = managerA.ballMoveUp(ball);
		time--; 
	} -> UpdatePossession()
	prob_A_Dribble[1]: dribbleRight{
		teamA = managerA.playerMoveRight(i, teamA);
		ball = managerA.ballMoveRight(ball);
		time--;
	} -> UpdatePossession()
	prob_A_Dribble[2]: dribbleDown{
		teamA = managerA.playerMoveDown(i, teamA);
		ball = managerA.ballMoveDown(ball);
		time--;
	} -> UpdatePossession()
	prob_A_Dribble[3]: dribbleLeft{
		teamA = managerA.playerMoveLeft(i, teamA);
		ball = managerA.ballMoveLeft(ball);
		time--;
	} -> UpdatePossession()
	prob_A_Dribble[4]: dribbleStay{
		time--;
	} -> UpdatePossession()
};

hvar A_PassTargets[3];
hvar prob_A_PassTarget[3];
A_Pass(i) = {
	A_PassTargets = managerA.getPassingTargets(i);
	prob_A_PassTarget = managerA.probPassing(i, teamA);
} -> pcase {
	prob_A_PassTarget[0]: A_PassTo(i, A_PassTargets[0])
	prob_A_PassTarget[1]: A_PassTo(i, A_PassTargets[1])
	prob_A_PassTarget[2]: A_PassTo(i, A_PassTargets[2])
};

hvar prob_A_PassTo[2];
A_PassTo(i, t) = {
	prob_A_PassTo = managerA.probPassTo(i, t, teamA);
} -> pcase {
	prob_A_PassTo[0]: passSuccess{
		ball = managerA.getLocation(t, teamA);
		possession = gameManager.getPossession(0, t); 
		time--;
	} -> UpdatePossession()
	prob_A_PassTo[1]: passFail{
		ball = managerA.failPassBallLocation(t, teamA);
		possession = gameManager.getStartingPossession();
	} -> UpdatePossession()
};

hvar prob_A_Shoot[2];
A_Shoot(i) = {
	prob_A_Shoot = managerA.probShoot(i, teamA);
} -> pcase {
	prob_A_Shoot[0]: goalSuccess{ Ascore++; time--; } -> Reset()
	prob_A_Shoot[1]: goalFail{
		ball = managerA.failGoalBallLocation(); 
		possession = gameManager.getStartingPossession(); 
		time--;
	} -> UpdatePossession()
};

hvar prob_A_Advance[5];
A_Advance(i) = {
	prob_A_Advance = managerA.probAdvance(i, teamA);
} -> pcase {
	prob_A_Advance[0]: advanceUp{
		teamA = managerA.playerMoveUp(i, teamA);
		time--; 
	} -> UpdatePossession()
	prob_A_Advance[1]: advanceUp{
		teamA = managerA.playerMoveRight(i, teamA);
		time--;
	} -> UpdatePossession()
	prob_A_Advance[2]: advanceUp{
		teamA = managerA.playerMoveDown(i, teamA);
		time--;
	} -> UpdatePossession()
	prob_A_Advance[3]: advanceUp{
		teamA = managerA.playerMoveLeft(i, teamA);
		time--;
	} -> UpdatePossession()
	prob_A_Advance[4]: advanceStay{
		time--;
	} -> UpdatePossession()
};

hvar prob_A_Move[5];
A_Move(i) = {
	prob_A_Move = managerA.probMove(i, teamA, ball);
} -> pcase {
	prob_A_Move[0]: moveUp{
		teamA = managerA.playerMoveUp(i, teamA);
		time--; 
	} -> UpdatePossession()
	prob_A_Move[1]: moveRight{
		teamA = managerA.playerMoveRight(i, teamA);
		time--;
	} -> UpdatePossession()
	prob_A_Move[2]: moveDown{
		teamA = managerA.playerMoveDown(i, teamA);
		time--;
	} -> UpdatePossession()
	prob_A_Move[3]: moveLeft{
		teamA = managerA.playerMoveLeft(i, teamA);
		time--;
	} -> UpdatePossession()
	prob_A_Move[4]: moveStay{
		time--;
	} -> UpdatePossession()
};


/// B Action

B_Action(i) = [managerB.isBallInPlayerBoundary(i, ball) && managerB.isBallWithPlayer(i, possession)] B_ActionWithPlayerPossession(i)
           [] [managerB.isBallInPlayerBoundary(i, ball) && managerB.isBallWithTeammate(i, possession)] B_ActionWithTeammatePossession(i)
           [] [managerB.isBallInPlayerBoundary(i, ball)] B_ActionWithoutPossession(i)
           [] [!managerB.isBallInPlayerBoundary(i, ball)] skip -> Game();

hvar prob_B_ActionWithPlayerPossession[3];
B_ActionWithPlayerPossession(i) = {
	prob_B_ActionWithPlayerPossession = managerB.probActionWithPlayerPossession(i, teamB);
} -> pcase {
	prob_B_ActionWithPlayerPossession[0]: B_Dribble(i)
	prob_B_ActionWithPlayerPossession[1]: B_Pass(i)
	prob_B_ActionWithPlayerPossession[2]: B_Shoot(i)
};

B_ActionWithTeammatePossession(i) = B_Advance(i);

B_ActionWithoutPossession(i) = B_Move(i);

hvar prob_B_Dribble[5];
B_Dribble(i) = {
	prob_B_Dribble = managerB.probDribble(i, teamB);
} -> pcase {
	prob_B_Dribble[0]: dribbleUp{
		teamB = managerB.playerMoveUp(i, teamB);
		ball = managerB.ballMoveUp(ball);
		time--; 
	} -> UpdatePossession()
	prob_B_Dribble[1]: dribbleRight{
		teamB = managerB.playerMoveRight(i, teamB);
		ball = managerB.ballMoveRight(ball);
		time--;
	} -> UpdatePossession()
	prob_B_Dribble[2]: dribbleDown{
		teamB = managerB.playerMoveDown(i, teamB);
		ball = managerB.ballMoveDown(ball);
		time--;
	} -> UpdatePossession()
	prob_B_Dribble[3]: dribbleLeft{
		teamB = managerB.playerMoveLeft(i, teamB);
		time--;
		ball = managerB.ballMoveLeft(ball);
	} -> UpdatePossession()
	prob_B_Dribble[4]: dribbleStay{
		time--;
	} -> UpdatePossession()
};

hvar B_PassTargets[3];
hvar prob_B_PassTarget[3];
B_Pass(i) = {
	B_PassTargets = managerB.getPassingTargets(i);
	prob_B_PassTarget = managerB.probPassing(i, teamB);
} -> pcase {
	prob_B_PassTarget[0]: B_PassTo(i, B_PassTargets[0])
	prob_B_PassTarget[1]: B_PassTo(i, B_PassTargets[1])
	prob_B_PassTarget[2]: B_PassTo(i, B_PassTargets[2])
};

hvar prob_B_PassTo[2];
B_PassTo(i, t) = {
	prob_B_PassTo = managerB.probPassTo(i, t, teamB);
} -> pcase {
	prob_B_PassTo[0]: passSuccess{
		ball = managerB.getLocation(t, teamB);
		possession = gameManager.getPossession(0, t); 
		time--;
	} -> UpdatePossession()
	prob_B_PassTo[1]: passFail{
		ball = managerB.failPassBallLocation(t, teamB);
		possession = gameManager.getStartingPossession();
	} -> UpdatePossession()
};

hvar prob_B_Shoot[2];
B_Shoot(i) = {
	prob_B_Shoot = managerB.probShoot(i, teamB);
} -> pcase {
	prob_B_Shoot[0]: goalSuccess{ Bscore++; time--; } -> Reset()
	prob_B_Shoot[1]: goalFail{
		ball = managerB.failGoalBallLocation(); 
		possession = gameManager.getStartingPossession(); 
		time--;
	} -> UpdatePossession()
};

hvar prob_B_Advance[5];
B_Advance(i) = {
	prob_B_Advance = managerB.probAdvance(i, teamB);
} -> pcase {
	prob_B_Advance[0]: advanceUp{
		teamB = managerB.playerMoveUp(i, teamB);
		time--; 
	} -> UpdatePossession()
	prob_B_Advance[1]: advanceUp{
		teamB = managerB.playerMoveRight(i, teamB);
		time--;
	} -> UpdatePossession()
	prob_B_Advance[2]: advanceUp{
		teamB = managerB.playerMoveDown(i, teamB);
		time--;
	} -> UpdatePossession()
	prob_B_Advance[3]: advanceUp{
		teamB = managerB.playerMoveLeft(i, teamB); 
		time--;
	} -> UpdatePossession()
	prob_B_Advance[4]: advanceStay{
		time--;
	} -> UpdatePossession()
};

hvar prob_B_Move[5];
B_Move(i) = {
	prob_B_Move = managerB.probMove(i, teamB, ball);
} -> pcase {
	prob_B_Move[0]: moveUp{
		teamB = managerB.playerMoveUp(i, teamB);
		time--; 
	} -> UpdatePossession()
	prob_B_Move[1]: moveRight{
		teamB = managerB.playerMoveRight(i, teamB);
		time--;
	} -> UpdatePossession()
	prob_B_Move[2]: moveDown{
		teamB = managerB.playerMoveDown(i, teamB);
		time--;
	} -> UpdatePossession()
	prob_B_Move[3]: moveLeft{
		teamB = managerB.playerMoveLeft(i, teamB); 
		time--;
	} -> UpdatePossession()
	prob_B_Move[4]: moveStay{
		time--;
	} -> UpdatePossession()
};


/// Game 

Reset() = reset{
	teamA = managerA.getPlayerStartingLocations();
	teamB = managerB.getPlayerStartingLocations();
	ball = gameManager.getStartingBallLocation();
	possession = gameManager.getStartingPossession();
} -> Game();

UpdatePossession() = updatePossession{
	possession = gameManager.updatePossession(possession, ball, teamA, teamB);
	time--;
} -> Game();


# define goal (Ascore == 1);
# assert Game() deadlockfree;
# assert Game() reaches goal with prob;
